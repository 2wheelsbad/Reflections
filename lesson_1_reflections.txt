How did viewing a diff between two versions of a file help you see the bug that was introduced?
By looking at how the file was originally, it was easy to location the changes. Since the issue
could only occur from a change, it limited the amount of information that had to be inspected.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
The less time spent having to guess or hunt down different versions of a file means you'll have more time to focus on your work.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google Doc does?
Manually saving ensures that your commits each have a logically change and prevents your history from getting cluttered up with useless commits.
However, you are required to do commiting and problems can arise from user error.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is design with programming in mind, where functions can span across multiple file. Google Docs is centered around single documents, like essays and spreadsheets which are not dependant on other files.

How can you use the commands git log and git diff to view the history of files?
You can use git log to get a list of all changes committed to a file, and git diff to view the changes between two commits.

How might using version control make you more confident to make changes that could break something?
By knowing that you can always revert to a functional state, you don't have to worry about introducing features
that may break the current application, since you can easily compare to the previous functional state.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git for developing android applications and games.

